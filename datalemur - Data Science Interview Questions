-- Question 1: Assume you're given two tables containing data about Facebook Pages and their respective likes (as in "Like a Facebook Page").
--Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.

SELECT p.page_id FROM pages p
FULL JOIN page_likes pl
on p.page_id = pl.page_id
where liked_date is NULL
order by p.page_id asc

-- Question 2:Assume you're given the table on user viewership categorised by device type where the three types are laptop, tablet, and phone.
--Write a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. Output the total viewership for laptops as laptop_reviews and the total viewership for mobile devices as mobile_views.

SELECT 
  sum(CASE WHEN device_type = 'laptop' THEN 1 ELSE 0 END) AS laptop_views, 
  sum(CASE WHEN device_type IN ('tablet', 'phone') THEN 1 ELSE 0 END) AS mobile_views 
FROM viewership

--Question 3: Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.
--Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.

select candidate_id from (select * from candidates
where skill in ('Python', 'Tableau', 'PostgreSQL'))sub
group by 1
having count(skill) = '3'

-- Question 4: Assume you're given a table containing job postings from various companies on the LinkedIn platform. Write a query to retrieve the count of companies that have posted duplicate job listings.

select count(*)
from (SELECT 
  company_id, 
  title, 
  description, 
  COUNT(job_id) AS job_count
FROM job_listings
GROUP BY company_id, title, description)sub
where job_count > 1

--Question 5 :Assume you're given the tables containing completed trade orders and user details in a Robinhood trading system.
--Write a query to retrieve the top three cities that have the highest number of completed trade orders listed in descending order. Output the city name and the corresponding number of completed trade orders.

with t1 as (select t.user_id, u.city, t.order_id as order_id
from trades t 
join users u    
on t.user_id = u.user_id
where status = 'Completed')

select city, count(order_id)
from t1
GROUP BY city
order by count(order_id) desc
limit 3

--Question 6: Given the reviews table, write a query to retrieve the average star rating for each product, grouped by month. The output should display the month as a numerical value, product ID, and average star rating rounded to two decimal places. Sort the output first by month and then by product ID.

SELECT date_part( 'month' ,submit_date),product_ID,round(AVG(stars),2) 
FROM reviews
group by 1,2
order by 1,2;

--Question 7: Assume you have an events table on Facebook app analytics. Write a query to calculate the click-through rate (CTR) for the app in 2022 and round the results to 2 decimal places.
--Definition and note: Percentage of click-through rate (CTR) = 100.0 * Number of clicks / Number of impressions
--To avoid integer division, multiply the CTR by 100.0, not 100.

with t1 as (SELECT app_id,
case when event_type = 'impression' then 1 end as impression,
case when event_type = 'click' then 1 end as clicks
FROM events
WHERE timestamp >= '2022-01-01' 
  AND timestamp < '2023-01-01')
select app_id,round( (100.0 * (sum(clicks)) / (sum(impression))),2) as ctr 
from t1
group by 1

-- Question 8: Assume you're given tables with information about TikTok user sign-ups and confirmations through email and text. New users on TikTok sign up using their email addresses, and upon sign-up, each user receives a text message confirmation to activate their account.

--Write a query to display the user IDs of those who did not confirm their sign-up on the first day, but confirmed on the second day.

--Definition: action_date refers to the date when users activated their accounts and confirmed their sign-up through text messages.

select user_id
from (select e.user_id,e.email_id,t.signup_action, e.signup_date, t.action_date
from emails e
join texts t
on e.email_id = t.email_id
where signup_action = 'Confirmed' AND action_date = signup_date  + interval '1 day') sub;

--Question 9: CVS Health is trying to better understand its pharmacy sales, and how well different products are selling. Each drug can only be produced by one manufacturer.
--Write a query to find the top 3 most profitable drugs sold, and how much profit they made. Assume that there are no ties in the profits. Display the result from the highest to the lowest total profit.

SELECT drug, (total_sales - cogs) as profit
FROM pharmacy_sales
order by profit DESC
limit 3

--Write a query to identify the manufacturers associated with the drugs that resulted in losses for CVS Health and calculate the total amount of losses incurred.
--Output the manufacturer's name, the number of drugs associated with losses, and the total losses in absolute value. Display the results sorted in descending order with the highest losses displayed at the top.

select manufacturer,count(drug), sum(abs(total_loss))
from
(SELECT manufacturer, drug, (total_sales - cogs) as total_loss
FROM pharmacy_sales
where total_sales - cogs < 0
order by total_loss ASC)sub
group by 1
order by 2 desc ,3 desc

-- Write a query to calculate the total drug sales for each manufacturer. Round the answer to the nearest million and report your results in descending order of total sales. In case of any duplicates, sort them alphabetically by the manufacturer name.
--Since this data will be displayed on a dashboard viewed by business stakeholders, please format your results as follows: "$36 million".

SELECT 
  manufacturer, 
  CONCAT( '$', ROUND(SUM(total_sales) / 1000000), ' million') AS sales_mil 
FROM pharmacy_sales 
GROUP BY manufacturer 
ORDER BY SUM(total_sales) DESC, manufacturer;
