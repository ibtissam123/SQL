/*Subquery Mania + WITH Quiz */
/* Question 1 : Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales. */
/* Solution 1 with Subquery */

SELECT t3.rep, t2.region, t2.max_total
FROM
    (SELECT region, MAX(total) as max_total
    FROM(
         SELECT s.name as rep, r.name as region,  SUM(o.total_amt_usd) AS total
          FROM accounts a 
          JOIN sales_reps s 
          ON a.sales_rep_id = s.id
          JOIN orders o
          ON a.id =  o.account_id
          JOIN region r 
          ON s.region_id = r.id
          GROUP BY 1,2
          ORDER BY 3 DESC ) t1
          GROUP BY 1) t2
JOIN
          (SELECT s.name as rep, r.name as region,  SUM(o.total_amt_usd) AS total
          FROM accounts a 
          JOIN sales_reps s 
          ON a.sales_rep_id = s.id
          JOIN orders o
          ON a.id =  o.account_id
          JOIN region r 
          ON s.region_id = r.id
          GROUP BY 1,2
          ORDER BY 3) t3
ON t2.max_total = t3.total AND t2.region = t3.region
/* Solution 2 with "WITH" */
WITH sub1 AS (
             SELECT s.name as rep, r.name as region,  SUM(o.total_amt_usd) AS total
             FROM accounts a 
             JOIN sales_reps s 
             ON a.sales_rep_id = s.id
             JOIN orders o
             ON a.id =  o.account_id
             JOIN region r 
             ON s.region_id = r.id
             GROUP BY 1,2
             ORDER BY 3 DESC ),
sub2 as (SELECT region, MAX(total) as max_total
         FROM sub1
         GROUP BY 1 )
         
SELECT sub1.rep, sub2.region, sub2.max_total
FROM sub1
Join sub2
ON sub2.max_total = sub1.total AND sub1.region = sub2.region

/* Question 2 :For the region with the largest (sum) of sales total_amt_usd, how many total (count) orders were placed? */
/* Solution 1 with Subquery */
SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY 1
HAVING SUM(o.total_amt_usd) = (
                              SELECT MAX(total)
                               FROM
                                  (SELECT r.name, SUM(o.total_amt_usd) as total
                                  FROM sales_reps s
                                  JOIN accounts a
                                  ON a.sales_rep_id = s.id
                                  JOIN orders o
                                  ON o.account_id = a.id
                                  JOIN region r
                                  ON r.id = s.region_id
                                  GROUP BY 1) sub)

/* Solution 2 with "WITH" */
WITH table1 as (
               SELECT r.name, SUM(o.total_amt_usd) as total
               FROM sales_reps s
               JOIN accounts a
               ON a.sales_rep_id = s.id
               JOIN orders o
               ON o.account_id = a.id
               JOIN region r
               ON r.id = s.region_id
               GROUP BY 1),
table2 as (SELECT MAX(total)
           FROM table1)
SELECT r.name, COUNT(*) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name
HAVING SUM(o.total_amt_usd) = (select * from table2)

/* Quiz: LEFT & RIGHT */
/* Question 1: In the accounts table, there is a column holding the website for each company. The last three digits specify what type of web address they are using. A list of extensions (and pricing) is provided here. Pull these extensions and provide how many of each website type exist in the accounts table.*/

SELECT domaine, COUNT(*)
FROM 
(SELECT RIGHT(website, 3) as domaine
FROM accounts) t1
GROUP BY 1


/* Question 2:There is much debate about how much the name (or even the first letter of a company name) matters. Use the accounts table to pull the first letter of each company name to see the distribution of company names that begin with each letter (or number).*/

SELECT first_letter, COUNT(*)
FROM
(SELECT name, LEFT(name, 1) first_letter
FROM accounts)t1
GROUP BY 1
ORDER BY 1

/* Question 3:Use the accounts table and a CASE statement to create two groups: one group of company names that start with a number and a second group of those company names that start with a letter. What proportion of company names start with a letter?*/
SELECT  letter_or_number, count(*)
FROM
      (SELECT CASE
      WHEN (LEFT(name, 1) in ( 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'))THEN 'letters'
      ELSE 'numbers'
      END AS letter_or_number
      FROM accounts)t1
GROUP BY 1
           
/* Question 4: Consider vowels as a, e, i, o, and u. What proportion of company names start with a vowel, and what percent start with anything else?*/
SELECT vowel_or_else, count(*)
FROM(SELECT CASE
     WHEN (LEFT(UPPER(name), 1) in ( 'A','E','I','O','U'))THEN 'vowels'
    ELSE 'else'
    END AS vowel_or_else
    FROM accounts)t1
GROUP BY vowel_or_else

/* Quiz: POSITION, STRPOS, & SUBSTR */

/* Question 1:Use the accounts table to create first and last name columns that hold the first and last names for the primary_poc.*/

SELECT primary_poc,LEFT(primary_poc,(STRPOS( primary_poc, ' '))) as first_name, RIGHT(primary_poc,LENGTH(primary_poc)-STRPOS( primary_poc, ' ')) as last_name
FROM accounts

/* Question 2:Now see if you can do the same thing for every rep name in the sales_reps table. Again provide first and last name columns.*/

SELECT name, LEFT(name,(STRPOS(name, ' '))) as first_name,
             RIGHT(name, LENGTH(name)-STRPOS(name, ' ')) last_name
FROM sales_reps

/* Quiz: CONCAT */
/* Question 1 & 2: Each company in the accounts table wants to create an email address for each primary_poc. The email address should be the first name of the primary_poc . last name primary_poc @ company name .com */

SELECT concat(LEFT(primary_poc,(STRPOS(primary_poc, ' '))),'.',RIGHT(primary_poc, LENGTH(primary_poc)-STRPOS(primary_poc, ' ')),'@',REPLACE(name, ' ', ''), '.com') as email
FROM accounts a

/* Question 3: We would also like to create an initial password, which they will change after their first log in. The first password will be the first letter of the primary_poc's first name (lowercase), then the last letter of their first name (lowercase), the first letter of their last name (lowercase), the last letter of their last name (lowercase), the number of letters in their first name, the number of letters in their last name, and then the name of the company they are working with, all capitalized with no spaces.*/

WITH t1 AS (
    SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name
    FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com'), LEFT(LOWER(first_name), 1) || RIGHT(LOWER(first_name), 1) || LEFT(LOWER(last_name), 1) || RIGHT(LOWER(last_name), 1) || LENGTH(first_name) || LENGTH(last_name) || REPLACE(UPPER(name), ' ', '')
FROM t1;

/* Quiz:CAST*/

SELECT CAST(CONCAT(SUBSTR(date,7,4),
SUBSTR(date,1,2),
SUBSTR(date,4,2))as date) as date
FROM sf_crime_data


/* Quiz: Window Functions 2 */
/* Creating a Partitioned Running Total Using Window Functions - create a running total of standard_amt_usd (in the orders table) over order time, but this time, date truncate occurred_at by year and partition by that same year-truncated occurred_at variable. Your final table should have three columns: One with the amount being added for each row, one for the truncated date, and a final column with the running total within each year.*/

SELECT standard_amt_usd,
date_trunc('year', occurred_at) as year,
SUM(standard_amt_usd) OVER( 
  PARTITION BY (date_trunc('year', occurred_at))
ORDER BY occurred_at) as running_total
FROM orders


